{
  "name": "Fall2016-project-cesiu",
  "tagline": "fall2016-project-cesiu created by GitHub Classroom",
  "body": "[![Build Status](https://travis-ci.org/cpe305/fall2016-project-cesiu.svg?branch=master)](https://travis-ci.org/cpe305/fall2016-project-cesiu)\r\n\r\n# SmartRochambeau\r\n![startmenu](https://raw.githubusercontent.com/cpe305/fall2016-project-cesiu/master/images/Screen%20Shot%202016-12-08%20at%207.20.10%20PM.png)\r\n\r\nSmartRochambeau is a single player Rock-Paper-Scissors game featuring four\r\ndifferent AI opponents, developed as an individual project for Professor\r\nGudrun Socher's CPE 305 at Cal Poly, Fall 2016.\r\n\r\n## Installing\r\nThe cross-platform JAR (`SmartRochambeau.jar`) is required to run the game. A\r\n`game-data.ser` file is generated upon saving, and can be copied to a new \r\nenvironment if you wish to preserve old results.\r\n\r\n## Running\r\nSmartRochambeau can be run by double clicking on the JAR or from the command \r\nline using `java -jar SmartRochambeau.jar`. The command line mode can be \r\nreached by adding the `-c` flag.\r\n![mainscreen](https://raw.githubusercontent.com/cpe305/fall2016-project-cesiu/master/images/Screen%20Shot%202016-12-08%20at%207.21.31%20PM.png)\r\n\r\nIn addition to providing AI opponents against which to play Rock-Paper-Scissors,\r\nSmartRochambeau keeps statistics on the performance of each opponent and can\r\nsave its state when the player quits, allowing the machine learning algorithms\r\nto pick up where they left off when a new session begins and allowing the \r\nalgorithms to be compared.\r\n\r\n## Opponents\r\nSmartRochambeau features four AI opponents:\r\n* A **random AI** as a control, which simply selects a random throw every round.\r\n* A **Markov Chain AI** modeled using nine states and three intermediate states, \r\n  which answers the question, \"Considering what the player threw last and \r\n  whether or not he won, what is he likely to throw next?\". At any given time, \r\n  the current state is determined by the player's last throw and the result of \r\n  that round, e.g., \"Rock, win\". Each state contains frequencies logging how \r\n  often, when the game is at that current state, the player has moved according \r\n  to each of the three intermediate states, which contain only a throw, e.g., \r\n  \"Paper\". For example, the state \"Rock, win\" would contain three numbers \r\n  corresponding to how often, after playing Rock and winning, the player then \r\n  threw Rock, Paper, and Scissors. Based on those numbers, the AI can predict \r\n  the player's most likely next move. The AI trains as it runs, updating the \r\n  frequencies once it knows the outcome of the current round before it moves to\r\n  the next state.\r\n* A **Naive Bayes AI** -- implemented mostly as an experiment, not because I thought\r\n  it was necessarily a good algorithm for this problem -- that attempts to\r\n  answer the question, \"Considering the player's last few throws, what is he\r\n  leading up to throwing?\". The idea being, a Markov-Chain-based is vulnerable\r\n  because Rock-Paper-Scissors doesn't really satisfy the Markov Property; what\r\n  the player does next is not solely dependant on what he did last. The Naive\r\n  Bayes AI attempts to defeat 'longer' strategies wherein the player makes a\r\n  few moves to set his opponent up for a later move. The AI maintains a queue\r\n  of the player's last few throws as well as nine frequencies for how often each\r\n  individual throw 'led up to' each of the other throws. For example, if the\r\n  last three throws were \"Rock, Paper, Rock\", the AI can look at how often,\r\n  historically, Rock and Paper have indivdually led up to Rock, Paper, or\r\n  Scissors, then combine those probabilities using Bayes Rule. Like the Markov\r\n  Chain AI, the Naive Bayes AI is capable of training as it goes, though this\r\n  makes it vulnerable to overfitting and thus long term shifts in strategy.\r\n* A **Pattern Matching AI**, which I personally predicted would do best of the \r\n  three, that attempts to answer the same question as the Naive Bayes AI, but\r\n  based on the pattern of the individual throws, not their general overall\r\n  frequencies. The AI maintains a complete ternary tree of throws to allow\r\n  for faster pattern matching, with each possible pattern represented as a\r\n  unique path from root to a leaf, and each leaf, as you might expect, contains\r\n  frequencies for each of the three throws. The Pattern Matching AI, too, is\r\n  capable of training as it runs..\r\n\r\n![consoleview](https://raw.githubusercontent.com/cpe305/fall2016-project-cesiu/master/images/Screen%20Shot%202016-12-08%20at%207.22.54%20PM.png)\r\n\r\n## Limitations\r\nThese AI all share a common drawback: training as they go makes them easy to\r\nset up and play immediately, but it makes them vulnerable to overfitting. A\r\nplayer might make a slight change to his strategy, and the AI might take\r\na long time to catch up.\r\n\r\nOne possible solution is to count how many times the AI has used a throw for \r\ntraining. After a certain threshold, whether that be related to number of throws\r\ntrained on, win rate, or some combination thereof, the AI stops saving\r\ninformation after each round. After a certain amount of time or after the win\r\nrate drops below some other threshold, the AI can start training again, perhaps\r\npartially or completely \"wiping the slate\" and deleting some or all of its saved\r\ninformation.\r\n\r\n## Architecture\r\n![class diagram](https://github.com/cpe305/fall2016-project-cesiu/blob/master/diagrams/classDiagram.png?raw=true)\r\n\r\nSmartRochambeau uses a modified Model-View-Controller architecture pattern, with\r\na controller class providing a generalized interface to the UI for the core\r\nlogic and also giving the UI access to methods of the core logic. Both the UI\r\nand the AI implement an interface or an abstract class  designed to make adding \r\nnew machine learning AI easy.\r\n\r\n![mainclasses] (https://github.com/cpe305/fall2016-project-cesiu/blob/master/images/diagramMain.png?raw=true)\r\n\r\nThe core of SmartRochambeau is the GameModerator class, which handles all game\r\nlogic, the UIController class, which provides generalized methods for the \r\nGameModerator to notify user interfaces, the GameAI abstract class, which \r\nstandardizes the hooks required for a functioning AI, and the GameSerializer\r\nclass, which saves and restores games.\r\n\r\n![aiclasses] (https://github.com/cpe305/fall2016-project-cesiu/blob/master/images/diagramAI.png?raw=true)\r\n\r\nIncluded are four AI classes, as elaborated upon above. Adding a new AI is as\r\nsimple as implementing the makeThrow method, which returns the AI's next choice\r\nof move (and typically calls the prediction logic), and the storeResult method,\r\nwhich returns the results of the last round to the AI so it can train itself\r\nas appropriate. The GameAI class provides a utility method to analyze \r\nfrequencies of throws and generate the appropriate response, if the AI needs it.\r\n\r\n![uiclasses] (https://github.com/cpe305/fall2016-project-cesiu/blob/master/images/diagramUI.png?raw=true)\r\n\r\nOn the UI end, both a controller and an interface are used: the interface\r\nrequires only that a UI have some method to display results. The UIController\r\nthen provides a number of methods to send or receive data to or from the \r\nGameModerator, which a UI may or may not need to call.\r\n\r\n## Design Patterns\r\n* The **Observer** pattern is combined with the MVC architecture pattern to \r\n  allow multiple types of user interfaces -- which may or may not be running on\r\n  the same thread as the moderator -- to update their displays. Note, however,\r\n  that a pure Observer patter is not used; the subject is instantiated with\r\n  one observer, and no observers can be registered or unregistered. It is\r\n  expected that a single player game will require one UI, and that won't change\r\n  throughout a session.\r\n* The **Strategy** pattern allows multiple AI to be easily implemented and\r\n  swapped. Adding new AI strategies is made much easier. (Though making the UI\r\n  changes to choose that new AI...still not so easy.)\r\n* The **State** pattern is used, for obvious reasons, by the Markov Chain AI,\r\n  since, well, Markov Chains represent transitions of states.\r\n* The **Composite** pattern, similarly, is used by the Pattern Matching AI to\r\n  represent its tree of patterns.\r\n\r\n## Academic Takeaways\r\n* Things I liked best:\r\n  * First and foremost, I greatly enjoyed the opportunity to choose and propose\r\n    my own project and its goals for this class. I know that it's not really \r\n    an industry-accurate scenario, but I had a lot more fun working on this\r\n    project than on my 308/309 (Software Engineering I, II) project and my\r\n    ongoing 402/405/406 (capstone) project.\r\n    * On that note, that meant that I could decide on the process I liked best;\r\n      I could start with Waterfall and move to Agile whenever I wanted to.\r\n      (Even if I deviated from the schedule as the quarter got busier...)\r\n  * Playtesting SmartRochambeau with my roommates appears to confirm my initial\r\n    hypotheses that Pattern Matching would do well and Naive Bayes, less so.\r\n    Always nice when that happens.\r\n  * JavaFX is tedious and verbose, but it's amazing compared to Swing. It's\r\n    like eating steak with a paring knife instead of with a butter knife.\r\n* Key learnings:\r\n  * I had an idea of how software process worked, and I'd done it in team\r\n    settings, but this was the first time I'd gotten a chance to use it\r\n    on an individual project, and it worked well. It kept me accountable.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}